// 冒泡排序的基本实现，用于排序固定类型的数组
fn bubble_sort<T: Ord>(arr: &mut [T]) {
    let len = arr.len();
    for i in 0..len {
        for j in 0..len - i - 1 {
            if arr[j] > arr[j + 1] {
                arr.swap(j, j + 1);
            }
        }
    }
}

// 范型和PartialOrd实现，用于排序任意类型的数组
fn generic_bubble_sort<T: PartialOrd>(arr: &mut [T]) {
    let len = arr.len();
    for i in 0..len {
        for j in 0..len - i - 1 {
            if arr[j] > arr[j + 1] {
                arr.swap(j, j + 1);
            }
        }
    }
}

fn main() {
    // 固定类型数组的排序
    let mut arr_i32 = [4, 2, 8, 1, 5];
    println!("Original array: {:?}", arr_i32);
    bubble_sort(&mut arr_i32);
    println!("Sorted array: {:?}", arr_i32);

    // 使用范型和PartialOrd实现的排序
    let mut arr_generic = ["apple", "banana", "orange", "grape", "pineapple"];
    println!("Original generic array: {:?}", arr_generic);
    generic_bubble_sort(&mut arr_generic);
    println!("Sorted generic array: {:?}", arr_generic);
}
